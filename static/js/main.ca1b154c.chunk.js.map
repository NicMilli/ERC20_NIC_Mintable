{"version":3,"sources":["bckgrnd.jpg","extension1.png","extension2.png","mylogo.png","getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","client","CoinGeckoClient","timeout","autoRetry","App","state","loaded","kycAddress","tokenSaleAddr","tokenAddr","userTokens","tokenSupply","cost","price","componentDidMount","eth","getAccounts","accounts","getChainId","networkId","NicTokenInstance","Contract","NicToken","abi","networks","address","NicTokenSaleInstance","NicTokenSale","KYCInstance","KycContract","listenToTokenTransfer","setState","updateTokenCounts","priceSet","alert","error","simplePrice","vs_currencies","ids","latest","usd","Math","pow","methods","balanceOf","call","totalSupply","events","Transfer","to","on","handleBuyTokens","buyTokens","send","from","value","utils","toWei","handleInputChange","event","target","type","checked","name","handleKycWhitelisting","setKycCompleted","priceview","hideKYC","x","document","getElementById","style","display","this","className","backgroundImage","bckgrnd","backgroundSize","height","color","src","mylogo","alt","onClick","id","onChange","href","extension1","extension2","Component","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ca1b154c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bckgrnd.7937050e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/extension1.95b72708.png\";","module.exports = __webpack_public_path__ + \"static/media/extension2.4f31e465.png\";","module.exports = __webpack_public_path__ + \"static/media/mylogo.b8d3a561.png\";","import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport NicToken from \"./contracts/NicToken.json\";\nimport NicTokenSale from \"./contracts/NicTokenSale.json\";\nimport KycContract from \"./contracts/KycContract.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\nimport { CoinGeckoClient } from 'coingecko-api-v3';\n\n//import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n//import { faEthereum } from '@fortawesome/free-brands-svg-icons';\nimport bckgrnd from './bckgrnd.jpg';\nimport extension1 from './extension1.png';\nimport extension2 from './extension2.png';\nimport mylogo from './mylogo.png';\n\n\nconst client = new CoinGeckoClient({\n  timeout: 1000,\n  autoRetry: true,\n});\n\n\nclass App extends Component {\n  state = {loaded: false, kycAddress: \"0x123...\", tokenSaleAddr: \"No address set yet\", \n  tokenAddr: null, userTokens: 0, tokenSupply:0, cost:0, price:0 };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      this.web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      this.accounts = await this.web3.eth.getAccounts();\n\n      // Get the contract instance.\n      this.networkId = await this.web3.eth.getChainId();\n\n      this.NicTokenInstance = new this.web3.eth.Contract(\n        NicToken.abi,\n        NicToken.networks[this.networkId] && NicToken.networks[this.networkId].address,\n      );\n\n      this.NicTokenSaleInstance = new this.web3.eth.Contract(\n        NicTokenSale.abi,\n        NicTokenSale.networks[this.networkId] && NicTokenSale.networks[this.networkId].address,\n      );\n\n      this.KYCInstance = new this.web3.eth.Contract(\n        KycContract.abi,\n        KycContract.networks[this.networkId] && KycContract.networks[this.networkId].address,\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.listenToTokenTransfer();\n      this.setState({loaded: true, tokenSaleAddr: NicTokenSale.networks[this.networkId].address, \n        tokenAddr: NicToken.networks[this.networkId].address },\n         this.updateTokenCounts, this.priceSet());\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details. \n        Please install the metamask plugin and connect to the Ropsten test network in order to buy coins\n        You may need to show test networks in settings, advanced, show test networks`,\n      );\n      console.error(error);\n    }\n  };\n\n  priceSet = async() => {\n    let latest = await client.simplePrice({vs_currencies:'usd', ids: 'ethereum'});\n    //this.costSet();\n    this.setState({price: latest.ethereum.usd, cost: latest.ethereum.usd*Math.pow(10,-18) });\n  };\n\n  updateTokenCounts = async() => {\n    let userTokens = await this.NicTokenInstance.methods.balanceOf(this.accounts[0]).call();\n    let tokenSupply = await this.NicTokenInstance.methods.totalSupply().call();\n    this.setState({userTokens: userTokens, tokenSupply: tokenSupply});\n  }\n\n  listenToTokenTransfer = () => {\n    this.NicTokenInstance.events.Transfer({to: this.accounts[0]}).on(\"data\", this.updateTokenCounts);\n  }\n\n  handleBuyTokens = async() => {\n    await this.NicTokenSaleInstance.methods.buyTokens(this.accounts[0]).send({from: this.accounts[0], value: this.web3.utils.toWei(\"1\", \"wei\")});\n  }\n\n  handleInputChange = (event) => {\n    const target = event.target;\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\n    const name = target.name;\n    this.setState({\n      [name] : value\n    });\n    }\n\n    handleKycWhitelisting = async() => {\n      console.log(this.KYCInstance);\n      //console.log(this.NicTokenInstance.methods.owner);\n      await this.KYCInstance.methods.setKycCompleted(this.state.kycAddress).send({from: this.accounts[0]});\n      alert(\"KYC for \"+this.state.kycAddress+\" has been completed.\")\n    }\n\n    priceview = async() => {\n      await this.priceSet();\n      const {price} = this.state;\n      alert(\"The price is $\"+price);\n     }\n\n     hideKYC = () => {\n      var x = document.getElementById('kyc');\n      if (x.style.display === 'none') {\n          x.style.display = 'block';\n      } else {\n          x.style.display = 'none';\n         }\n      }\n  \n\n  render() {\n    if (!this.state.loaded) {\n      return <div className=\"App\">Loading Web3, accounts, and contract...<br></br>\n        <h2>In order to buy coins, please install the metamask plugin on chrome or firefox and connect to the Ropsten test network.</h2> <br></br>\n        <a href=\"https://metamask.io/download/\">Download Metamask Extension For Your Browser!</a><br></br>\n        You may need to show test networks in settings, advanced, show test networks.<br></br><br></br>Find and pin the Metamask extension in your browser<br></br>\n        <img src={extension1} alt=\"Instructions\"></img><br></br>then, select the Ropsten test network<br></br>\n        <img src={extension2} alt=\"Instructions\"></img><br></br>\n        <br></br>You can then select 'buy' and request FREE test Ether from the test faucet.<br></br><br></br>\n        <h2>Please refresh the page once connected</h2>\n      </div>;\n    }\n    return (\n      <div className=\"App\" style={{\n        backgroundImage: `url(${bckgrnd})`,\n        backgroundSize: \"cover\",\n        height: \"100vh\",\n        color: \"#f5f5f5\"\n      }}>\n        <header className='App-header' ><img className='App-logo' src={mylogo} alt=\"logo\"/></header>\n        <h1>Nic's Token Sale</h1>\n        <p>View the current ethereum price in USD:<button type=\"button\" className='price-btn' onClick={this.priceview}><strong>Ethereum Price</strong></button></p>\n        <p>The token cost is 1 Wei or ${this.state.cost} - NOW THATS A STEAL!</p>\n        <p>Current token supply: {this.state.tokenSupply}</p>\n\n        <button id=\"toggle\" type=\"button\" className= 'btn' onClick={this.hideKYC}>Show/Hide KYC (Owner Only)</button>\n  \n        <div id=\"kyc\">\n        <h2>Kyc Whitelisting:</h2>\n        <p>Address to allow token buying: <input type=\"text\" name=\"kycAddress\" value={this.state.kycAddress} onChange = {this.handleInputChange} /></p>\n        <button type=\"button\" className= 'blk-btn' onClick={this.handleKycWhitelisting}>Add to Whitelist</button> \n        </div>\n\n        <h2><span>Buy Tokens</span></h2>\n        <p><span>Please send funds to this address to buy tokens: <br></br>{this.state.tokenSaleAddr}</span></p>\n        <p><span>You currently have: {this.state.userTokens} NIC tokens!</span></p>\n        <button type=\"button\" className= 'blk-btn' onClick={this.handleBuyTokens}>Buy More Tokens</button>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}